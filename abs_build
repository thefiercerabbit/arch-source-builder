#!/bin/bash
declare -A TO_COMPILE # a nice hash table, thank you bash 4

#### Global variables #####
BUILD_DIR="${HOME}/abs"
PKG=""
PKG_ARCH=""
PKG_BASE=""
#PKG_FILE=""
#PKG_INFO=""
PKG_VERSION=""
#PKG_REPO=""
# don't care about pgp, clean the directory after build, don't wait user's confirmation in pacman
MAKEPKG_FLAGS="--skippgpcheck -C --noconfirm "
FORCE_COPY=false
OUTPUT_DIR="${HOME}/abs/AAA-packages"
#TO_RETRIEVE=()

RED='\033[91m'
BLUE='\033[94m'
GREEN='\033[92m'
YELLOW='\033[93m'
ENDC='\033[0m'
###########################
function build_package() {
    if ! [ -d "${OUTPUT_DIR}" ]; then
	echo "Creating output directory for built packages : ${OUTPUT_DIR}"
	mkdir -p "${OUTPUT_DIR}"
    fi
    PKG_FILE="${OUTPUT_DIR}/${PKG}-${PKG_VERSION}-${PKG_ARCH}.pkg.tar.xz"
    echo -n "Looking for ${PKG_FILE}..."
    if [[ -f "${PKG_FILE}" ]] && [[ "${FORCE_COPY}" == false ]]; then
	echo " found ! No need to rebuild, passing"
    else
	echo " not found !"
	echo "Compiling ${PKG} source files"
	cd "${BUILD_DIR}/$1"
	makepkg ${MAKEPKG_FLAGS}
	for f in ./*.pkg.tar.xz; do
	    mv -v $f "${OUTPUT_DIR}/$f"
	done
    fi
}

if ! [[ -d ${BUILD_DIR} ]]; then
    mkdir ${BUILD_DIR}
    ${VERBOSE} && echo -e ${GREEN}"${BUILD_DIR} created"${END}
fi
${VERBOSE} && echo -e ${YELLOW}"${BUILD_DIR} set as build directory"${ENDC}

OPTIONS="cdfirso:"
while getopts "${OPTIONS}" OPTION; do
    case "${OPTION}" in
	'c' ) MAKEPKG_FLAGS+="-c ";
	      ;;
	'd' ) MAKEPKG_FLAGS+="-d ";
	      ;;
    	'f' ) MAKEPKG_FLAGS+="-f "; FORCE_COPY=true;
    	      ;;
	'i' ) MAKEPKG_FLAGS+="-i ";
	      ;;
	'o' ) OUTPUT_DIR="$(realpath ${OPTARG})";
	      ;;
	'r' ) MAKEPKG_FLAGS+="-r ";
	      ;;
    	's' ) MAKEPKG_FLAGS+="-s ";
    	      ;;
    	* ) echo -e "Usage: $0 [-d] [-f] [-i] [-r] [-s]\nSee makepkg man page for description." 1>&2; exit 1
    	    ;;
    esac
    
done

for PKG in "${@:${OPTIND}:${#@}}"; do
    #echo ${PKG}
    PKG_INFO=$(pacman -Si ${PKG})
    PKG_REPO=$(echo "${PKG_INFO}" | sed -n 's/^Repository\s*: \(.*\)$/\1/p')
    PKG_ARCH=$(echo "${PKG_INFO}" | sed -n 's/^Architecture\s*: \(.*\)$/\1/p')
    PKG_VERSION=$(echo "${PKG_INFO}" | sed -n 's/^Version\s*: \(.*\)$/\1/p')
    PKG_BASE=${PKG}
    PKG_DIR="/var/abs/${PKG_REPO}/${PKG_BASE}"
    if ! [[ -d ${PKG_DIR} ]]; then
	${VERBOSE} && echo -n "Getting base package..."
	PKG_BASE="$(curl -s  https://www.archlinux.org/packages/${PKG_REPO}/${PKG_ARCH}/${PKG}/json/ | sed 's/.*"pkgbase": "\([^"]*\).*/\1/')"
	${VERBOSE} && echo " ${PKG_BASE}"
	PKG_DIR="/var/abs/${PKG_REPO}/${PKG_BASE}"
    fi
    echo ${PKG_DIR}
    if [[ -z "${PKG_DIR}" ]]; then
	echo -e ${RED}"ERROR : ${PKG} cannot be found !"${ENDC}
	${VERBOSE} && echo -e ${RED}"Package ${PKG} does not belong to ${BUILD_DIR}"${ENDC}
    else
	if [[ ! -d "${BUILD_DIR}/${PKG_BASE}" ]] || [[ "${FORCE_COPY}" == true ]]; then
	    [[ -d "${BUILD_DIR}/${PKG_BASE}" ]] && echo "Directory exists, but copy is forced (option -f passed as argument)"
	    cp -r "${PKG_DIR}" "${BUILD_DIR}"
	    echo -e ${GREEN}"Copying ${PKG} files to ${BUILD_DIR}/${PKG_BASE}"${ENDC}
	    build_package ${PKG_BASE}
	fi
    fi
done
